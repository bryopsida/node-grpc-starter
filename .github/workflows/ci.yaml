name: Validate
on:
  push:
jobs:
  test:
    name: Build And Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run lint --if-present
      - run: npm audit --omit dev
        continue-on-error: true
      - run: npm test
  build-image:
    name: Build Image
    env:
        REGISTRY: ghcr.io/bryopsida
        IMAGE_NAME: node-grpc-starter
    needs: 
      - test
    permissions:
        contents: read
        packages: write
        id-token: write
        security-events: write
    outputs:
        sha_tag: ${{ steps.short-sha.outputs.sha_tag }}
        build_tag: ${{ steps.short-sha.outputs.build_tag }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb
        with:
          cosign-release: 'v1.13.6'
        # for multi arch container builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
            platforms: all
      - name: Setup Docker buildx
        id: buildx
        timeout-minutes: 4
        uses: docker/setup-buildx-action@941183f0a080fa6be59a9e3d3f4108c19a528204
      - name: Log into registry
        timeout-minutes: 5
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Default Branch Name
        id: default-branch
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "name=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name) >> $GITHUB_OUTPUT"
      - name: Extract Docker metadata
        id: meta
        timeout-minutes: 5
        uses: docker/metadata-action@12d9b9a905eda64a7255fe54e5dd14b7f0624941
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', steps.default-branch.outputs.name) }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
      - name: Build Docker image
        id: build
        timeout-minutes: 25
        uses: docker/build-push-action@0ec91264d895acf7dfe05d54d8a3cc28f95b6346
        with:
            context: .
            load: true
            push: false
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
      - name: Get Short SHA
        id: short-sha
        run: |
            export SHORT_SHA=$(git rev-parse --short HEAD)
            export SHORT_SHA_TAG_ONLY=sha-$SHORT_SHA
            echo "sha_short=$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "build_tag=$SHORT_SHA_TAG_ONLY" >> $GITHUB_OUTPUT
            echo "sha_tag=${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA" >> $GITHUB_OUTPUT
        
      - name: Scan image
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: ${{ steps.short-sha.outputs.sha_tag }}
            format: 'sarif'
            output: 'scan-results.sarif'
      - name: Upload Container Scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: 'scan-results.sarif'
      - name: Push image
        if: ${{ github.event_name != 'pull_request' }}
        id: push
        timeout-minutes: 60
        uses: docker/build-push-action@0ec91264d895acf7dfe05d54d8a3cc28f95b6346
        with:
            context: .
            builder: ${{ steps.buildx.outputs.name }}
            load: false
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            platforms: linux/amd64,linux/arm64
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
            COSIGN_EXPERIMENTAL: "true"
        run: cosign sign --force --recursive ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}
